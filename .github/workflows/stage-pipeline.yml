name: TrainApi CI

on:
    push:
        branches: ["develop"]
    pull_request:
        branches: ["develop"]

env:
    APP_NAME: train-api
    APP_VERSION: 1.0.${{ github.run_number }}
    GCP_REGION: us-east1
    ARTIFACT_REGISTRY: "${GCP_REGION}-docker.pkg.dev/train-api-staging/container-registry/${APP_NAME}"
    DOCKER_BUILDKIT: 1

jobs:
    deploy-stage:
        name: Build
        runs-on: ubuntu-latest

        permissions:
            contents: read
            id-token: write

        container:
            image: google/cloud-sdk:517.0.0
            options: --user root

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Install Docker
              run: |
                  apt-get update
                  apt-get install -y ca-certificates curl jq

                  install -m 0755 -d /etc/apt/keyrings
                  curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc
                  chmod a+r /etc/apt/keyrings/docker.asc

                  echo \
                    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
                    $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
                    tee /etc/apt/sources.list.d/docker.list > /dev/null

                  apt-get update
                  apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
                  docker --version
                  docker compose version

            - uses: google-github-actions/auth@v2
              with:
                  project_id: train-api-staging
                  workload_identity_provider: "projects/892549741395/locations/global/workloadIdentityPools/github-trainapi-pool-staging/providers/github"
                  service_account: "github-wif@train-api-staging.iam.gserviceaccount.com"

            - name: Retrieve Secrets from GCP Secret Manager
              run: |
                  # MongoDB
                  MONGO=$(gcloud secrets versions access latest --secret="mongo-secrets")
                  MONGO_USER=$(echo "$MONGO" | jq -r '.username')
                  MONGO_PASS=$(echo "$MONGO" | jq -r '.password')
                  MONGO_CLUSTER=$(echo "$MONGO" | jq -r '.cluster')
                  MONGO_DB=$(echo "$MONGO" | jq -r '.database')
                  MONGO_PARAMS=$(echo "$MONGO" | jq -r '.params')
                  echo "MONGO_URI=mongodb+srv://${MONGO_USER}:${MONGO_PASS}@${MONGO_CLUSTER}/${MONGO_DB}?${MONGO_PARAMS}" >> $GITHUB_ENV

                  # JWT Secret
                  JWT=$(gcloud secrets versions access latest --secret="jwt-secret")
                  echo "SECRET_CODE=$(echo "$JWT" | jq -r '.secret_code')" >> $GITHUB_ENV

                  # Firebase (multi-line secret injection)
          {
            echo 'FIREBASE_CONFIG<<EOF'
            gcloud secrets versions access latest --secret="firebase-secrets"
            echo 'EOF'
          } >> $GITHUB_ENV

            - name: Build Docker Image
              env:
                  MONGO_URI: ${{ env.MONGO_URI }}
                  SECRET_CODE: ${{ env.SECRET_CODE }}
                  FIREBASE_CONFIG: ${{ env.FIREBASE_CONFIG }}
                  NODE_ENV: stage
              run: |
                  docker compose build \
                    --build-arg APP_NAME=$APP_NAME \
                    --build-arg APP_VERSION=$APP_VERSION \
                    --build-arg MONGO_URI=$MONGO_URI \
                    --build-arg SECRET_CODE=$SECRET_CODE \
                    --build-arg FIREBASE_CONFIG=$FIREBASE_CONFIG \
                    train-api

            - name: Configure Docker for Artifact Registry
              run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

            - name: Tag Docker Image
              run: docker tag ${{ env.APP_NAME }}:${{ env.APP_VERSION }} ${{ env.ARTIFACT_REGISTRY }}:${{ env.APP_VERSION }}

            - name: Push Docker Image
              run: docker push ${{ env.ARTIFACT_REGISTRY }}:${{ env.APP_VERSION }}

            - name: Deploy to Google App Engine
              run: |
                  IMAGE_URL="${{ env.ARTIFACT_REGISTRY }}:${{ env.APP_VERSION }}"
                  echo "Deploying $IMAGE_URL"
                  gcloud app deploy --image-url=$IMAGE_URL --quiet
