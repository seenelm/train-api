name: TrainApi CI

on:
    push:
        branches: ["main"]
    pull_request:
        branches: ["main"]

env:
    APP_NAME: train-api
    APP_VERSION: 1.0.${{ github.run_number }}
    GCP_REGION: us-east1
    ARTIFACT_REGISTRY: "${GCP_REGION}-docker.pkg.dev/train-api-staging/container-registry"

jobs:
    deploy-stage:
        name: Build
        runs-on: ubuntu-latest
        container:
            image: google/cloud-sdk:517.0.0
            options: --user root
        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Install Docker
              run: apt-get update && apt-get install -y docker.io docker-compose jq

            - id: auth
              uses: google-github-actions/auth@v2.0.0
              with:
                  workload_identity_provider: "projects/892549741395/locations/global/workloadIdentityPools/github-trainapi-pool-staging/providers/github"
                  service_account: "github-wif@train-api-staging.iam.gserviceaccount.com"

            - name: Retrieve Secrets from GCP Secret Manager
              id: get_secrets
              run: |
                  SECRET_DATA=$(gcloud secrets versions access latest --secret="mongo-secrets")
                  MONGO_USER=$(echo $SECRET_DATA | jq -r '.MONGO_USER')
                  MONGO_PASS=$(echo $SECRET_DATA | jq -r '.MONGO_PASS')
                  MONGO_CLUSTER=$(echo $SECRET_DATA | jq -r '.MONGO_CLUSTER')
                  MONGO_DB=$(echo $SECRET_DATA | jq -r '.MONGO_DB')
                  MONGO_PARAMS=$( echo $SECRET_DATA | jq -r '.MONGO_PARAMS')
                  MONGO_URI="mongodb+srv://${MONGO_USER}:${MONGO_PASS}$@{MONGO_CLUSTER}/${MONGO_DB}?${MONGO_PARAMS}"

            - name: Build Docker Image
              env:
                  MONGO_URI: ${{ steps.get_secrets.outputs.MONGO_URI }}
                  NODE_ENV: stage
              run: docker compose build --build-arg APP_NAME=$APP_NAME --build-arg APP_VERSION=$APP_VERSION train-api

            - name: Configure Docker for GCR
              run: gcloud auth configure-docker ${{ env.GCP_REGION}}-docker.pkg.dev

            - name: Tag Docker Image
              run: docker tag ${{ env.APP_NAME }}:${{ env.APP_VERSION }} ${{ env.ARTIFACT_REGISTRY }}:${{ env.APP_VERSION }}

            - name: Push Docker Image to Artifact Registry
              run: docker push ${{ env.ARTIFACT_REGISTRY }}:${{ env.APP_VERSION }}
